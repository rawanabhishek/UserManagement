/******************************************************************************
 
 *  Purpose: A Class  implemented for handling the request coming from the user
 *           and Controlling it through RestController annotation using spring 
 *           boot that will handle all the request related to that user.
 *  		
 *  @author  Abhishek Rawat
 *  @version 1.0
 *  @since   17-12-2019
 *
 ******************************************************************************/

package com.bridgelabz.usermanagement.controller;

import java.io.IOException;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.bridgelabz.fundoo.user.dto.SetPasswordDTO;
import com.bridgelabz.usermanagement.dto.AuthenticationDTO;
import com.bridgelabz.usermanagement.dto.LoginDTO;
import com.bridgelabz.usermanagement.dto.UserDTO;
import com.bridgelabz.usermanagement.entity.User;
import com.bridgelabz.usermanagement.response.Response;
import com.bridgelabz.usermanagement.service.IUserService;
import com.bridgelabz.usermanagement.utility.CommonFiles;
import com.bridgelabz.usermanagement.utility.JsonUtility;
import com.bridgelabz.usermanagement.utility.TokenUtility;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;





@RestController
@RequestMapping("/usermanagement")
@CrossOrigin
public class UserController {

	@Autowired
	private IUserService userService;

	public static final Logger LOG = LoggerFactory.getLogger(UserController.class);

	/**
	 * Purpose: Creating a userLogin controller which will fetch the request body
	 * and send it to the service.
	 * 
	 * @param login object containing user login credentials.
	 * @return ResponseEntity which is holding the user object and HttpStatus in
	 *         that entity.
	 * 
	 */
	@PutMapping("/login")
	public ResponseEntity<Response> userLogin(@RequestBody LoginDTO login) {
		
		LOG.info(CommonFiles.CONTROLLER_LOGIN_METHOD);
		return new ResponseEntity<>(userService.userLogin(login), HttpStatus.OK);

	}

	/**
	 * Purpose: Creating a userRegister controller which will fetch the request body
	 * and send it to the service.
	 * 
	 * @param register object containing user registration details .
	 * @return ResponseEntity which is holding the user object and HttpStatus in
	 *         that entity.
	 * @throws JsonProcessingException 
	 * @throws JsonMappingException 
	 * 
	 */
	@PostMapping("/register")
	public ResponseEntity<Response> userRegister( @RequestParam("picture") MultipartFile file,
			@RequestParam("json") String json) throws JsonMappingException, JsonProcessingException {
		UserDTO userDTO = new UserDTO();
		userDTO = (UserDTO) JsonUtility.readMapper(json, userDTO);
		System.out.println(userDTO);
		LOG.info(CommonFiles.CONTROLLER_REGISTER_METHOD);
		return new ResponseEntity<>(userService.userRegister(file ,userDTO), HttpStatus.OK);
	}

	/**
	 * Purpose: Creating a userRegister controller which will fetch the request
	 * header and send it to the service.
	 * 
	 * @param email string containing user email details.
	 * @return ResponseEntity which is holding the user object and HttpStatus in
	 *         that entity.
	 * 
	 */
	@PutMapping("/forgotpassword")
	public ResponseEntity<Response> userForgotPassword(@RequestHeader(name = "email") String email) {
		LOG.info(CommonFiles.CONTROLLER_FORGOTPASSWORD_METHOD);
		return new ResponseEntity<>(userService.userForgotPassword(email), HttpStatus.OK);

	}
	
	/**
	 * Purpose: Creating a setPassword controller which will fetch the request body
	 * and send it to the service.
	 * 
	 * @param setPasswordDTO object containing the user new password.
	 * @param tokenfor       authorization to check the user has authority for to
	 *                       setPassword.
	 * @return ResponseEntity which is holding the user object and HttpStatus in
	 *         that entity.
	 * 
	 */
	@PutMapping("/setpassword")
	public ResponseEntity<Response> userSetPassword(@RequestParam String password ,@RequestHeader String token) {

		LOG.info(CommonFiles.CONTROLLER_SETPASSWORD_METHOD);
		return new ResponseEntity<>(new Response(200, CommonFiles.SET_PASSWORD_SUCCESS,userService.userSetPassword(password ,TokenUtility.tokenParser(token))), HttpStatus.OK);
	}
	
	

	/**
	 *  Purpose: Creating a userUpdate controller which will fetch the request
	 * header and send it to the service.
	 * @param emailIdToken string containing user email details
	 * @param json containing the updation string 
	 * @param file Multipart file containing image
	 * @return
	 * @throws JsonMappingException
	 * @throws JsonProcessingException
	 */
	@PutMapping("/updateuser")
	public ResponseEntity<Response> updateUser(@RequestHeader String emailIdToken,
			@RequestParam String json, @RequestParam("file") MultipartFile file) throws JsonMappingException, JsonProcessingException {
		UserDTO userDTO = new UserDTO();
		userDTO = (UserDTO) JsonUtility.readMapper(json, userDTO);
		System.out.println(userDTO);
		LOG.info(CommonFiles.CONTROLLER_UPDATE_METHOD);
		return new ResponseEntity<>(userService.updateUser(TokenUtility.tokenParser(emailIdToken), file ,userDTO), HttpStatus.OK);
	}




	
	/**
	 * Purpose: Creating add profile picture controller which will add profile picture
	 *          of user to the note
	 * @param emailIdToken for authorization to check the user has authority for Verifying
	 *              the account.
	 * @param file containing image for adding profile picture to the user 
	 * @return
	 * @throws IOException 
	 */
	@PostMapping("/addprofilepic")
	public ResponseEntity<Response> addProfilePic( @RequestHeader("emailIdToken")
			String emailIdToken  , @RequestParam("picture") MultipartFile file) throws IOException{
		
		return new ResponseEntity<>(new Response(200, CommonFiles.PHOTO_ADDED_SUCCESS,userService.addProfilePic(TokenUtility.tokenParser(emailIdToken) , file)),HttpStatus.OK);
	}
	
	
	/**
	 * Purpose: Creating remove profile picture controller which will remove profile picture
	 *          of user from note 
	 * @param emailIdToken for authorization to check the user has authority for Verifying
	 *              the account.
	 * @return ResponseEntity which is holding the user object and HttpStatus in
	 *         that entity..
	 * @throws IOException
	 */
	@PutMapping("/removeprofilepic")
	public ResponseEntity<Response> removeProfilePic( @RequestHeader("emailIdToken")
			String emailIdToken  ) throws IOException{
		
		return new ResponseEntity<>(new Response(200, CommonFiles.PHOTO_REMOVED_SUCCESS,userService.removeProfilePic(TokenUtility.tokenParser(emailIdToken))),HttpStatus.OK);
	}
	
	/**
	 * Purpose: Creating update profile picture controller which will update the profile picture
	 *          of user
	 * @param emailIdToken for authorization to check the user has authority for Verifying
	 *              the account.
	 * @param file containing image for updating user profile picture
	 * @return ResponseEntity which is holding the user object and HttpStatus in
	 *         that entity.
	 * @throws IOException
	 */
	@PutMapping("/updateprofilepic")
	public ResponseEntity<Response> updateProfilePic(@RequestHeader("emailIdToken")
			String emailIdToken ,@RequestParam("picture") MultipartFile file ) throws IOException{
		   System.out.println("Update profile pic controller");
		return new ResponseEntity<>(new Response(200, CommonFiles.PHOTO_UPDATED_SUCCESS,userService.updateProfilePic(TokenUtility.tokenParser(emailIdToken) ,file)),HttpStatus.OK);
	}
	
	
	/**
	 * Purpose: To fetch the profile picture of particular users
	 * @param emailIdToken  for authorization to check the user has authority for Verifying
	 *              the account.
	 * @return ResponseEntity which is holding the user object and HttpStatus in
	 *         that entity.
	 * @throws IOException
	 */
	@GetMapping("/profilepic")
	public ResponseEntity<Response> getProfilePic(@RequestHeader()
	String emailIdToken) throws IOException{

     return new ResponseEntity<>(userService.getProfilePic(TokenUtility.tokenParser(emailIdToken)),HttpStatus.OK);
}
	
	/**
	 * Purpose: To fetch all users from database
	 * @return ResponseEntity which is holding the user object and HttpStatus in
	 *         that entity.
	 */
	@GetMapping("/alluser")
	public ResponseEntity<Response> getAllUser(){
		return new ResponseEntity<>(userService.getAllUser(), HttpStatus.OK);
	}
	
	
	/**
	 * Purpose: To fetch particular user by emailId
	 * @param emaiIdToken for authorization to check the user has authority for Verifying
	 *              the account.
	 * @return  ResponseEntity which is holding the user object and HttpStatus in
	 *         that entity.
	 */
	@GetMapping("/userbyid")
	public User getUser(@RequestParam String emailIdToken){
		System.out.println("get user by id controller");
		return  userService.getUser(TokenUtility.tokenParser(emailIdToken));
	}
	
	

	
	

	/**
	 * Purpose: Creating controller which will fetch the login history list
	 *          of user
	 * @param emailIdToken for authorization to check the user has authority to make or access 
	 *        certain changes 
	 * @return ResponseEntity which is holding the user object and HttpStatus in
	 *         that entity.
	 */
	@GetMapping("/loginhistory")
	public ResponseEntity<Response> loginHistory(@RequestHeader String emailIdToken) {
		return new ResponseEntity<Response>(userService.loginHistory(TokenUtility.tokenParser(emailIdToken)), HttpStatus.OK);
	}
	
	
	/**
	 * Purpose: Creating lastest registration controller which will fetch  the list
	 *          of user
	 * @param emailIdToken for authorization to check the user has authority to make or access 
	 *        certain changes 
	 * @return ResponseEntity which is holding the user object and HttpStatus in
	 *         that entity.
	 */
	@GetMapping("/latestregistration")
	public ResponseEntity<Response> latestRegistration(@RequestHeader String emailIdToken) {
		return new ResponseEntity<Response>(userService.latestRegistration(TokenUtility.tokenParser(emailIdToken)), HttpStatus.OK);
	}
	
	
	/**
	 * Purpose: Creating Total user controller which will fetch the total count of user
	 * @param emailIdToken for authorization to check the user has authority to make or access 
	 *        certain changes 
	 * @return ResponseEntity which is holding the user object and HttpStatus in
	 *         that entity.
	 */
	@GetMapping("/totaluser")
	public ResponseEntity<Response> totalUser(@RequestHeader String emailIdToken) {
		return new ResponseEntity<Response>(userService.totalUser(TokenUtility.tokenParser(emailIdToken)), HttpStatus.OK);
	}
	
	/**
	 * Purpose: Creating gender controller which the send the percentage of male and female
	 *           from the database
	 * @param emailIdToken for authorization to check the user has authority to make or access 
	 *        certain changes 
	 * @return ResponseEntity which is holding the user object and HttpStatus in
	 *         that entity.
	 */
	@GetMapping("/gender")
	public ResponseEntity<Response> gender(@RequestHeader String emailIdToken) {
		return new ResponseEntity<Response>(userService.gender(TokenUtility.tokenParser(emailIdToken)), HttpStatus.OK);
	}
	
	
	/**
	 * Purpose: Creating Delete user controller which will delete the user form the database
	 * @param emailIdToken for authorization to check the user has authority to make or access 
	 *        certain changes 
	 * @return ResponseEntity which is holding the user object and HttpStatus in
	 *         that entity.
	 */
	@DeleteMapping("/deleteuser")
	public ResponseEntity<Response> deleteUser(String emailIdToken) {
		return new ResponseEntity<Response>(userService.deleteUser(TokenUtility.tokenParser(emailIdToken)), HttpStatus.OK);
	}
	
	/**
	 * Purpose: Creating authentication setting controller which will set the authentication setting of users.
	 * @param emailIdToken for authorization to check the user has authority to make or access 
	 *        certain changes 
	 * @param authentication
	 * @return ResponseEntity which is holding the user object and HttpStatus in
	 *         that entity.
	 */
	@PutMapping("/authenticationsetting")
	public ResponseEntity<Response> authSetting(@RequestHeader String emailIdToken,
			@RequestBody AuthenticationDTO authentication) {
		return new ResponseEntity<Response>(userService.authenticationSetting(TokenUtility.tokenParser(emailIdToken), authentication), HttpStatus.OK);
	}
	
	

}
